uniform float4 iMouse;           // Mouse drag pos=.xy Click pos=.zw (pixels)
uniform float  iTime;            // Shader playback time (s)
uniform float2 iResolution;      // Viewport resolution (pixels)
uniform float2 iImageResolution; // iImage1 resolution (pixels)
uniform shader iImage1;          // Texture
uniform float2 iOffset;          // Top-left corner of DrawingRect
uniform float2 iOrigin;          // Mouse drag started here

half3 kodachromeGrade(half3 color) {
    float luminance = dot(color, half3(0.299, 0.587, 0.114));
    
    // More subtle warm shift
    half3 warmShift = color;
    warmShift.r *= 1.12;  // Reduced from 1.25
    warmShift.g *= 1.08;  // Reduced from 1.15
    warmShift.b *= 0.92;  // Less blue reduction
    
    // More moderate saturation boost
    half3 saturatedColor = mix(half3(luminance), warmShift, 1.35); // Reduced from 1.8
    
    // Keep the S-curve (this part works well)
    saturatedColor.r = saturatedColor.r * saturatedColor.r * (3.0 - 2.0 * saturatedColor.r);
    saturatedColor.g = saturatedColor.g * saturatedColor.g * (3.0 - 2.0 * saturatedColor.g);
    saturatedColor.b = saturatedColor.b * saturatedColor.b * (3.0 - 2.0 * saturatedColor.b);
    
    // Subtle shadow lift
    saturatedColor += 0.03; // Reduced from 0.05
    
    // Keep highlight compression
    float highlightMask = smoothstep(0.7, 1.0, luminance);
    saturatedColor = mix(saturatedColor, saturatedColor * 0.88 + 0.12, highlightMask);
    
    // More subtle color shifts
    float warmMask = smoothstep(0.4, 0.7, saturatedColor.r / max(saturatedColor.b + 0.001, 0.001));
    saturatedColor.r *= mix(1.0, 1.15, warmMask); // Reduced from 1.3
    saturatedColor.g *= mix(1.0, 1.05, warmMask); // Reduced from 1.1
    
    float coolMask = smoothstep(0.4, 0.7, saturatedColor.b / max(saturatedColor.r + 0.001, 0.001));
    saturatedColor.b *= mix(1.0, 1.1, coolMask); // Reduced from 1.2
    
    return clamp(saturatedColor, 0.0, 1.0);
}

half4 main(float2 fragCoord) 
{	
    float2 renderingScale = iImageResolution.xy / iResolution.xy;
    float2 inputCoord = (fragCoord - iOffset) * renderingScale;
    
    half4 originalColor = iImage1.eval(inputCoord);
    
    half3 gradedColor = kodachromeGrade(originalColor.rgb);
    
    return half4(gradedColor, originalColor.a);
}